var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
define(["require", "exports", "core/packages/dispose", "core/packages/logger"], function (require, exports, Dispose, Logger) {
    var logger = new Logger(this);
    var BasicWorkerClient = (function (_super) {
        __extends(BasicWorkerClient, _super);
        function BasicWorkerClient(name) {
            var _this = _super.call(this) || this;
            _this.name = name;
            _this._callbacks = {};
            _this._loadedLibraries = {};
            _this._loadedTasks = {};
            _this._updateVerboseTask = null;
            _this._workerStartup = (function () { return __awaiter(_this, void 0, void 0, function () {
                var internalStartup, verboseSubscription;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            internalStartup = new Promise(function (resolve, reject) {
                                _this._callbacks[BasicWorkerClient._getCallbackId()] = { reject: reject, resolve: resolve };
                            });
                            this._worker = new Worker(location.app + "webworker/" + encodeURIComponent(this.name));
                            this._worker.onmessage = this._handleMessage.bind(this);
                            this._worker.onerror = this._handleError.bind(this);
                            return [4, internalStartup];
                        case 1:
                            _a.sent();
                            verboseSubscription = subscribeVerboseToggle(this._updateWorkerVerbose.bind(this));
                            this.disposeLater(function () {
                                unsubscribeVerboseToggle(verboseSubscription);
                                _this._terminateWorker(new Error("Worker client disposed."));
                            });
                            return [4, this._updateWorkerVerbose(VERBOSE)];
                        case 2:
                            _a.sent();
                            this._isRunning = true;
                            logger.debug('Worker "%s" started.', this.name);
                            return [2];
                    }
                });
            }); })();
            _this._workerStartup.catch(function (error) {
                _this._isRunning = false;
                logger.error('Worker "%s" startup failed.', _this.name, error);
            });
            return _this;
        }
        BasicWorkerClient.createTaskBase = function (deps, func) {
            var code = func.toString();
            return {
                code: code,
                taskId: H.utils.simpleHashIdentifier(code).toString(16),
                dependencies: deps,
            };
        };
        Object.defineProperty(BasicWorkerClient.prototype, "isRunning", {
            get: function () {
                return this._isRunning;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicWorkerClient.prototype, "isIdle", {
            get: function () {
                return this.isRunning && this.runningTasks == 0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicWorkerClient.prototype, "runningTasks", {
            get: function () {
                return Object.keys(this._callbacks).length;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicWorkerClient.prototype, "workerStartup", {
            get: function () {
                return this._workerStartup;
            },
            enumerable: true,
            configurable: true
        });
        BasicWorkerClient.prototype.isLibraryLoaded = function (libPath) {
            return this._loadedLibraries[libPath] || false;
        };
        BasicWorkerClient.prototype.getLoadedLibraries = function () {
            return Object.keys(this._loadedLibraries);
        };
        BasicWorkerClient.prototype.isTaskLoaded = function (taskId) {
            return this._loadedTasks[taskId] || false;
        };
        BasicWorkerClient.prototype.getLoadedTasks = function () {
            return Object.keys(this._loadedTasks);
        };
        BasicWorkerClient.prototype._terminateWorker = function (error) {
            var e_1, _a;
            this._worker.terminate();
            this._worker = null;
            this._isRunning = false;
            try {
                for (var _b = __values(Object.keys(this._callbacks)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    this._callbacks[key].reject(error);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            this._callbacks = {};
            this._loadedLibraries = {};
            this._loadedTasks = {};
        };
        BasicWorkerClient.prototype.createTask = function (deps, func) {
            return this.createTaskFromTaskBase(BasicWorkerClient.createTaskBase(deps, func));
        };
        BasicWorkerClient.prototype.createTaskFromTaskBase = function (taskBase) {
            var _this = this;
            var taskCreationPromise = new Promise(function (resolve, reject) {
                _this._callbacks[BasicWorkerClient._getCallbackId(taskBase.taskId)] = { resolve: resolve, reject: reject };
                _this._sendMessage({
                    type: "CREATE_TASK",
                    taskId: taskBase.taskId,
                    code: taskBase.code,
                    dependencies: taskBase.dependencies,
                });
            });
            taskCreationPromise
                .then(function () {
                var e_2, _a;
                _this._loadedTasks[taskBase.taskId] = true;
                try {
                    for (var _b = __values(Object.values(taskBase.dependencies)), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var lib = _c.value;
                        _this._loadedLibraries[lib] = true;
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            });
            return new Promise(function (resolve, reject) {
                taskCreationPromise.then(function () {
                    var proxy = (function () {
                        var args = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            args[_i] = arguments[_i];
                        }
                        var callId = H.randomGuid();
                        return new Promise(function (resolve, reject) {
                            taskCreationPromise
                                .then(function () {
                                _this._callbacks[BasicWorkerClient._getCallbackId(taskBase.taskId, callId)] = { resolve: resolve, reject: reject };
                                _this._sendMessage({
                                    type: "EXEC_TASK",
                                    taskId: taskBase.taskId,
                                    callId: callId,
                                    arguments: args,
                                });
                            })
                                .catch(function (error) {
                                reject(error);
                            });
                        });
                    });
                    proxy.taskId = taskBase.taskId;
                    proxy.code = taskBase.code;
                    proxy.dependencies = taskBase.dependencies;
                    resolve(proxy);
                });
                taskCreationPromise.catch(reject);
            });
        };
        BasicWorkerClient.prototype._handleError = function (ev) {
            logger.error('Error received from worker "%s":', this.name, ev);
            this._terminateWorker(ev);
        };
        BasicWorkerClient.prototype._handleMessage = function (ev) {
            var message = ev.data;
            switch (message.type) {
                case "WORKER_STARTED":
                    this._handleWorkerStartedMessage(message);
                    break;
                case "TASK_CREATE_SUCCESS":
                    this._handleTaskCreateSuccessMessage(message);
                    break;
                case "TASK_CREATE_FAIL":
                    this._handleTaskCreateFailMessage(message);
                    break;
                case "EXEC_TASK_SUCCESS":
                    this._handleExecTaskSuccessMessage(message);
                    break;
                case "EXEC_TASK_FAIL":
                    this._handleExecTaskFailMessage(message);
                    break;
                default:
                    logger.warn('Unknown message code "%s" from worker "%s":', message.type, this.name, message);
                    break;
            }
        };
        BasicWorkerClient.prototype._handleWorkerStartedMessage = function (message) {
            var callbackId = BasicWorkerClient._getCallbackId();
            if (this._callbacks[callbackId]) {
                this._callbacks[callbackId].resolve(true);
                delete this._callbacks[callbackId];
            }
            else {
                logger.warn('Received unexpected worker "%s" started message:', this.name, message);
            }
        };
        BasicWorkerClient.prototype._handleTaskCreateSuccessMessage = function (message) {
            var callbackId = BasicWorkerClient._getCallbackId(message.taskId);
            if (this._callbacks[callbackId]) {
                this._callbacks[callbackId].resolve(true);
                delete this._callbacks[callbackId];
            }
            else {
                logger.warn('Received unexpected task creation success message from "%s":', this.name, message);
            }
        };
        BasicWorkerClient.prototype._handleTaskCreateFailMessage = function (message) {
            var callbackId = BasicWorkerClient._getCallbackId(message.taskId);
            if (this._callbacks[callbackId]) {
                this._callbacks[callbackId].reject(new Error(message.error));
                delete this._callbacks[callbackId];
            }
            else {
                logger.warn('Received unexpected task creation failure message from "%s":', this.name, message);
            }
        };
        BasicWorkerClient.prototype._handleExecTaskSuccessMessage = function (message) {
            var callbackId = BasicWorkerClient._getCallbackId(message.taskId, message.callId);
            if (this._callbacks[callbackId]) {
                this._callbacks[callbackId].resolve(message.result);
                delete this._callbacks[callbackId];
            }
            else {
                logger.warn('Received unexpected task execution success message from "%s":', this.name, message);
            }
        };
        BasicWorkerClient.prototype._handleExecTaskFailMessage = function (message) {
            var callbackId = BasicWorkerClient._getCallbackId(message.taskId, message.callId);
            if (this._callbacks[callbackId]) {
                this._callbacks[callbackId].reject(new Error(message.error));
                delete this._callbacks[callbackId];
            }
            else {
                logger.warn('Received unexpected task execution failure message from "%s":', this.name, message);
            }
        };
        BasicWorkerClient.prototype._sendMessage = function (message) {
            this._worker.postMessage(message);
        };
        BasicWorkerClient._getCallbackId = function (taskId, callId) {
            if (!taskId && !callId)
                return "STARTUP";
            if (!callId)
                return "CREATE_" + taskId;
            return "EXEC_" + taskId + "_" + callId;
        };
        BasicWorkerClient.prototype._updateWorkerVerbose = function (value) {
            var _this = this;
            if (this._updateVerboseTask == null) {
                this._updateVerboseTask = this.createTask({}, function () { return function (value) {
                    VERBOSE = value;
                }; });
                this._updateVerboseTask.catch(function (error) {
                    logger.error('Could not create VERBOSE update tasks on "%s":', _this.name, error);
                });
            }
            return this._updateVerboseTask.then(function (task) {
                var updatePromise = task(value);
                updatePromise.then(function () {
                    logger.debug('Set VERBOSE flag to %s on "%s"', value, _this.name);
                });
                updatePromise.catch(function (error) {
                    logger.error('Could not update VERBOSE flag on "%s":', _this.name, error);
                });
            });
        };
        return BasicWorkerClient;
    }(Dispose));
    return BasicWorkerClient;
});
//# sourceMappingURL=basic-worker-client.js.map