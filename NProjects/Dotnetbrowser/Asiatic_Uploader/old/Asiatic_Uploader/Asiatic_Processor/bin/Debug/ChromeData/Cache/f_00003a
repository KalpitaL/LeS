var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define(["require", "exports", "core/components/base", "purchaseSupplierQuote/data/utilities", "purchaseSupplierQuote/purchaseSupplierQuote", "purchaseSupplierQuote/data/deliveryLeadTimeUnits", "api/PurchaseRequisitionAttachments.g", "api/AnswerInquiryExternal.g"], function (require, exports, component, utilities, purchaseSupplierQuote, deliveryLeadTimeUnits, purchaseRequisitionAttachmentsApi, answerInquiryApi) {
    function pluralize(str, amount) {
        return amount === 1 ? str : str.pluralize();
    }
    function ifSingular(amount, then, otherwise) {
        return amount === 1 ? then : otherwise;
    }
    var answer_inquiry = (function (_super) {
        __extends(answer_inquiry, _super);
        function answer_inquiry(environment) {
            var _this = _super.call(this) || this;
            _this.environment = environment;
            _this.copyrightYear = new Date().getFullYear();
            _this.utilities = utilities;
            _this.deliveryLeadTimeUnits = deliveryLeadTimeUnits.asArray();
            _this.dropZoneAttachmentsSettings = {
                onDrop: function (files) { return _this.handleAttachmentDrop(files); },
                onlyEnableIf: function () { return _this.environment.isPurchase; },
                maxFileSize: 999999,
            };
            _this.canChangeCurrency = ko.pureComputed(function () {
                return _this.inquiry().CanUserWrite() && !_this.inquiry().hasContractedItems();
            });
            _this.items = _this.environment.inquiry.items;
            _this.inquiry = _this.environment.inquiry.data;
            _this.normalItems = ko.pureComputed(function () { return _this.inquiry().normalItems(); });
            _this.additionalItems = ko.pureComputed(function () { return _this.inquiry().additionalItems(); });
            _this.specialPositions = ko.pureComputed(function () { return _this.inquiry().specialPositions(); });
            _this.possiblePaymentTerms = _this.environment.paymentTermCache.getItems();
            _this.possibleCurrencies = _this.environment.currencyCache.getItems();
            _this.possibleIncoTerms = ko.pureComputed(function () {
                return _this.environment.incoTermCache.getItems().map(function (x) {
                    if (x.IDCode === '---') {
                        x = Object.clone(x);
                        x.IDCode = null;
                    }
                    return x;
                });
            });
            _this.datePlaceholder = cultureHelper.userCultureData.DatePattern.toLowerCase();
            _this.setDefaultPaymentTerms();
            _this.disposeLater(purchaseSupplierQuote.instance.events.on('ItemSelected', function (data) {
                _this.navigateTo(data);
            }));
            _this.disposeLater(purchaseSupplierQuote.instance.events.once('AutofillRequested', function (e) {
                _this.autofillFromAttachment(e)
                    .then(function (_) { return _this.scrollTo('general-attachments'); });
            }));
            if (!!_this.inquiry() && _this.inquiry().CanUserWrite()) {
                (cultureHelper.detectedCultures).each(function (x) {
                    $.fn.datepicker.dates[x.Name] = {
                        days: x.DayNames,
                        daysShort: x.ShortDayNames,
                        daysMin: x.ShortestDayNames,
                        months: x.MonthNames,
                        monthsShort: x.ShortMonthNames,
                        weekStart: x.WeekStart,
                        titleFormat: "MM yyyy",
                    };
                });
            }
            _this.disposeLater(purchaseSupplierQuote.instance.events.on("AttachmentUploaded", function (newAttatchments) {
                var mappedAttachments = newAttatchments.map(function (att) { return H.map(att); });
                _this.inquiry().Attachments.push.apply(_this.inquiry().Attachments, mappedAttachments);
                purchaseSupplierQuote.instance.aside.preventOutsideClickClose(false);
                _this.scrollTo('general-attachments');
            }));
            setTimeout(function () { return $('panel.info').addClass('visible'); }, 500);
            return _this;
        }
        answer_inquiry.prototype.handleAttachmentDrop = function (files) {
            files.each(function (file) { return file.uploadOptions = [{ propertyName: 'SendWithInquiry', value: true }]; });
            files.each(function (file) {
                if (file.name.toLowerCase().endsWith('.pdf')) {
                    file.uploadOptions.add({ propertyName: 'IsOffer', value: true, caption: 'Use this as offer' });
                }
            });
            var inquiry = this.inquiry();
            var uploadFilesModal = app.instance.popup({
                componentName: "main/requisitions/documents/documents-upload-modal",
                componentParamsFn: function () {
                    return {
                        files: files,
                        isUploadedFromSidebar: false,
                        requisitionGuid: inquiry.RequisitionGuid(),
                        guid: inquiry.InquiryGuid(),
                    };
                },
            }).open();
            uploadFilesModal.disposeLater(purchaseSupplierQuote.instance.events.once("AttachmentUploaded", function (data) {
                uploadFilesModal.close();
            }));
            uploadFilesModal.disposeLater(function () {
                setTimeout(function () { return purchaseSupplierQuote.instance.aside.preventOutsideClickClose(false); }, 2);
            });
            purchaseSupplierQuote.instance.aside.preventOutsideClickClose(true);
        };
        answer_inquiry.prototype.setDefaultPaymentTerms = function () {
            var _this = this;
            if (!this.inquiry())
                return;
            var requestedPaymentTerm = this.possiblePaymentTerms.find(function (x) { return x.PaymentTargetDays === _this.inquiry().RequestedInquiryTerms.PaymentTargetDays(); });
            if (!requestedPaymentTerm)
                return;
            this.inquiry().OfferedPaymentTerms.ID(requestedPaymentTerm.ID);
        };
        answer_inquiry.prototype.registerDatepicker = function () {
            var _this = this;
            if (this.inquiry().CanUserWrite()) {
                window.setTimeout(function () {
                    var userCulture = cultureHelper.userCultureData;
                    $('.answer-inquiry .date-input').each(function (i, x) {
                        $(x).datepicker({
                            startDate: new Date(),
                            language: userCulture.Name,
                            autoclose: true,
                            format: _this.datePlaceholder,
                            keyboardNavigation: false,
                            forceParse: false,
                        });
                    });
                }, 250);
            }
        };
        answer_inquiry.prototype.submit = function () {
            var _this = this;
            var supplierConfirmation = function () {
                app.instance.dialog({
                    dialogType: DialogType.WARNING,
                    title: 'Submit Offer',
                    content: "<div>After submitting your offer is obligatory until " + _this.environment.inquiry.data().offerValidUntilString() + ". Are you sure you want to continue?</div>",
                    onOkButton: function () {
                        _this.isBusy(true);
                        var xhr = _this.environment.inquiry.save();
                        xhr.done(function () {
                            app.instance.dialog({
                                dialogType: DialogType.INFO,
                                title: 'Answer Saved',
                                content: "<div>We successfully saved your offer.</div>",
                                onOkButton: function () { return true; },
                            }).open();
                        });
                        xhr.always(function () {
                            _this.isBusy(false);
                            $('.answer-inquiry-scroll-container').animate({
                                scrollTop: 0
                            }, 1000);
                        });
                        return true;
                    },
                    onCancelButton: function () { return true; },
                }).open();
            };
            var afterWarning = this.environment.isPurchase ? function () { return _this.environment.inquiry.save(); } : supplierConfirmation;
            var unconfirmedItems = this.items().filter(function (i) { return i.isAutofilled() && !i.confirmedAutofill(); }).length;
            if (unconfirmedItems > 0) {
                app.instance.dialog({
                    dialogType: DialogType.WARNING,
                    title: 'Submit Offer',
                    content: "<div>There " + ifSingular(unconfirmedItems, 'is', 'are') + " " + unconfirmedItems + " automatically detected " + pluralize('item', unconfirmedItems) + " without manual confirmation. Continue?</div>",
                    onOkButton: afterWarning,
                    onCancelButton: function () { return true; },
                }).open();
            }
            else {
                afterWarning();
            }
        };
        answer_inquiry.prototype.cancel = function () {
            var _this = this;
            if (this.environment.isPurchase) {
                this.environment.inquiry.cancel();
                return;
            }
            var m = app.instance.dialog({
                dialogType: DialogType.WARNING,
                title: 'Do Not Quote',
                content: "<div>If you don't quote this inquiry you declare that you don't wish to make an offer. Are you sure you want to continue?</div>",
                onOkButton: function () {
                    _this.isBusy(true);
                    var xhr = _this.environment.inquiry.cancel();
                    xhr.done(function () {
                        var m = app.instance.dialog({
                            dialogType: DialogType.INFO,
                            title: 'Answer Saved',
                            content: "<div>We successfully saved that you don't wish to make an offer.</div>",
                            onOkButton: function () {
                                return true;
                            }
                        }).open();
                    });
                    xhr.always(function () {
                        _this.isBusy(false);
                        $('.answer-inquiry-scroll-container').animate({
                            scrollTop: 0
                        }, 1000);
                    });
                    return true;
                },
                onCancelButton: function () {
                    return true;
                }
            }).open();
        };
        answer_inquiry.prototype.navigateTo = function (element) {
            var elementId = typeof (element) === 'string' ? element : element.elementId || element.data().elementId;
            if (elementId === this.lastNavigationTarget &&
                element.origItem &&
                element.origItem.confirmedAutofill &&
                ko.isObservable(element.origItem.confirmedAutofill) &&
                ko.unwrap(element.origItem.isAutofilled) === true) {
                element.origItem.confirmedAutofill(true);
            }
            this.lastNavigationTarget = elementId;
            this.scrollTo(elementId);
        };
        answer_inquiry.prototype.scrollTo = function (element) {
            var elementId = typeof (element) === 'string' ? element : element.elementId || element.data().elementId;
            var scrollContainer = $('.answer-inquiry-scroll-container');
            var elementContainer = $('#' + elementId);
            scrollContainer.animate({
                scrollTop: scrollContainer.scrollTop() - scrollContainer.offset().top + elementContainer.offset().top - 12
            }, 250);
        };
        answer_inquiry.prototype.autofillFromAttachment = function (attachmentGuid) {
            var _this = this;
            this.isBusy(true);
            var timeout = Math.max(10000 + this.items.length * 1000, jQuery.ajaxSettings.timeout || 120000);
            var req = purchaseRequisitionAttachmentsApi.GetQuotationAutofill(attachmentGuid, { timeout: timeout });
            req.done(function (guesses) {
                _this.fillInGuesses(guesses);
                _this.inquiry().OfferAttachmentGuid(attachmentGuid);
            });
            return req.always(function (_) { return _this.isBusy(false); }).then(function (_) { return undefined; });
        };
        answer_inquiry.prototype.fillInGuesses = function (guesses) {
            var _this = this;
            guesses.Items.forEach(function (guessItem) {
                var matchingItem = _this.items().find(function (inqItem) { return inqItem.InquiryItemGuid() === guessItem.InquiryItemGuid; });
                if (matchingItem) {
                    matchingItem.Quantity(guessItem.Quantity);
                    matchingItem.pricePerUnit(guessItem.PricePerUnit);
                    matchingItem.PositionSum(guessItem.PositionTotal);
                    matchingItem.isAutofilled(true);
                }
                else {
                    var newItem = _this.addItemInternal();
                    newItem.pricePerUnit(guessItem.PricePerUnit);
                    newItem.VarianceQuantity(guessItem.Quantity);
                    newItem.PositionSum(guessItem.PositionTotal);
                    newItem.VarianceName("Extra Item");
                    newItem.Description(guessItem.Description);
                    newItem.isAutofilled(true);
                }
            });
        };
        answer_inquiry.prototype.getPaymentTermTitle = function (paymentTerm) {
            var term = H.unmap(ko.unwrap(paymentTerm));
            var text = term.hasOwnProperty('Text') ? term.Text : term.PaymentTermText;
            if (!text) {
                return term.PaymentTargetDays + ' days';
            }
            if (term.hasOwnProperty('DisplayName')) {
                return term['DisplayName'];
            }
            return text + ' (' + term.PaymentTargetDays + ' days)';
        };
        answer_inquiry.prototype.addItemInternal = function () {
            return this.environment.inquiry.createNewItem(this.environment);
        };
        answer_inquiry.prototype.addItem = function () {
            var _this = this;
            this.addItemInternal();
            window.setTimeout(function () { return _this.focusFirstInputOfAddedItem(); }, 100);
        };
        answer_inquiry.prototype.downloadQuote = function () {
            this._saveToDisk(answerInquiryApi.DownloadQuote(this.inquiry().InquiryGuid()), 'Quote');
        };
        answer_inquiry.prototype._saveToDisk = function (fileURL, fileName) {
            if (!window.ActiveXObject) {
                window.open(fileURL, fileName);
            }
            else if (!!window.ActiveXObject && document.execCommand) {
                var _window = window.open(fileURL, '_blank');
                _window.document.close();
                _window.document.execCommand('SaveAs', true, fileName || fileURL);
                _window.close();
            }
        };
        answer_inquiry.prototype.focusFirstInputOfAddedItem = function () {
            $(".supplier-added-item").last()
                .find("form-field-content").first()
                .children().first()
                .focus();
        };
        return answer_inquiry;
    }(component));
    return answer_inquiry;
});
//# sourceMappingURL=answer-inquiry.js.map