define(["require", "exports", "core/packages/router"], function (require, exports, router) {
    var listUtils = (function () {
        function listUtils() {
        }
        listUtils.getCustomPropertySelectionEvaluator = function (list, key, fallbackValue) {
            if (fallbackValue === void 0) { fallbackValue = undefined; }
            return ko.pureComputed({
                read: function () {
                    return list.selectedItem()
                        ? list.selectedItem().data()[key]
                        : fallbackValue;
                },
                write: function (value) {
                    if (!list.selectedItem() || list.selectedItem().data()[key] !== value) {
                        var item = list.items().find(function (item) {
                            return item.data()[key] === value;
                        });
                        item && item.isSelected(true);
                    }
                }
            });
        };
        listUtils.syncListIdentifierAndRoute = function (list, route) {
            var disposeLater = [];
            var syncFromRoute = function () {
                var ident = route.hashPart;
                if (ident) {
                    var r = list.getByIdentifier(ident);
                    r && r.isSelected(true);
                }
                else if (list.selectedItem()) {
                    list.selectedItem(null);
                }
            };
            disposeLater.push(list.items.subscribe(syncFromRoute));
            disposeLater.push(route.subscribe(syncFromRoute));
            disposeLater.push(list.selectedItem.subscribe(function (item) {
                var cur = route.hashPart;
                var tar = item ? item.getIdentifier() + "" : "";
                if (cur != tar) {
                    route.hashPart = tar;
                    router.update();
                }
            }));
            return {
                dispose: function () {
                    disposeLater.each(function (d) {
                        d.dispose();
                    });
                    disposeLater = [];
                }
            };
        };
        return listUtils;
    }());
    (function () {
        Object.isListItem = (function (o) {
            return o.hasOwnProperty('data') && ko.isObservable(o['data']) && o.hasOwnProperty('isChecked') && o.hasOwnProperty('isSelected');
        });
        Object.isList = (function (o) {
            return o.hasOwnProperty('items') && o.hasOwnProperty('selectedItem');
        });
    }());
    var list = (function () {
        function list(list) {
            var _this = this;
            this._selectedItemObs = ko.observable(null);
            this.validateItemFn = null;
            this.validateDataFn = null;
            this._forceDefaultSelectedItem = ko.observable(false);
            this._hasDefaultItem = ko.pureComputed(function () { return !!_this.items().find(function (item) {
                return item.isDefault;
            }); });
            this.items = ko.observableArray([])
                .extend({ rateLimit: { timeout: 50, method: "notifyWhenChangesStop" } });
            this.hasItems = ko.pureComputed(function () { return _this.items().length > 0; });
            this.actions = ko.observable({
                up: this.selectPrev.bind(this),
                down: this.selectNext.bind(this),
            });
            this._selectedItem = ko.pureComputed({
                read: function () {
                    var item = _this._selectedItemObs();
                    if (!item && _this.hasDefaultItem && _this.forceDefaultSelectedItem) {
                        _this.selectDefault();
                        return _this._selectedItemObs();
                    }
                    else {
                        return item;
                    }
                },
                write: function (v) {
                    if (v !== null && _this.items().indexOf(v) == -1)
                        throw new Error("Value must be an item from the list or null.");
                    if (v != _this._selectedItemObs()) {
                        _this._selectedItemObs(v);
                    }
                }
            });
            this._selectedIndex = ko.pureComputed({
                read: function () { return _this.items.indexOf(_this._selectedItemObs()); },
                write: function (n) {
                    if (n === undefined || n === null || n === -1) {
                        if (_this._selectedItemObs())
                            _this._selectedItemObs(null);
                    }
                    else if (typeof n === "number" && n >= 0) {
                        var item = _this.items()[n];
                        if (item)
                            item.isSelected(true);
                        else
                            throw new Error("selectedIndex is out of bounds.");
                    }
                    else
                        throw new Error("selectedIndex is not valid.");
                }
            });
            this._selectedIdentifier = ko.pureComputed({
                read: function () {
                    var item = _this._selectedItemObs();
                    var data = item && item.data();
                    if (data) {
                        return data.ID || data.IDCode || data.Guid;
                    }
                    return null;
                },
                write: function (idOrIdCodeOrGuid) {
                    var item = _this.getByIdentifier(idOrIdCodeOrGuid);
                    if (!item)
                        throw new Error("selectedIdentifier does not exist!");
                    else
                        item.isSelected(true);
                }
            });
            this._checkedItems = ko.pureComputed(function () {
                return _this.items().findAll(function (item) { return item.isChecked(); });
            });
            this.items.remove = function (itemOrRemoveFn) {
                var item;
                if (Object.isListItem(itemOrRemoveFn)) {
                    item = itemOrRemoveFn;
                }
                else {
                    item = _this.items().find(itemOrRemoveFn);
                }
                if (item && item.isSelected()) {
                    _this.selectedItem(null);
                }
                return ko.observableArray.fn.remove.call(_this.items, itemOrRemoveFn);
            };
            if (list) {
                this.addRange(list);
            }
        }
        Object.defineProperty(list.prototype, "Utils", {
            get: function () {
                return listUtils;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(list, "Utils", {
            get: function () {
                return listUtils;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(list.prototype, "hasDefaultItem", {
            get: function () {
                return this._hasDefaultItem();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(list.prototype, "forceDefaultSelectedItem", {
            get: function () {
                return this._forceDefaultSelectedItem();
            },
            set: function (value) {
                this._forceDefaultSelectedItem(!!value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(list.prototype, "selectedItem", {
            get: function () { return this._selectedItem; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(list.prototype, "selectedIndex", {
            get: function () { return this._selectedIndex; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(list.prototype, "selectedIdentifier", {
            get: function () { return this._selectedIdentifier; },
            enumerable: true,
            configurable: true
        });
        list.prototype.selectDefault = function () {
            var c = this.items().find(function (item) {
                return item.isDefault === true;
            });
            if (c) {
                c.isSelected(true);
            }
            return !!c;
        };
        list.prototype.selectFirst = function () {
            var c = this.items().first();
            if (!c)
                return false;
            c.isSelected(true);
            return true;
        };
        list.prototype.selectNext = function () {
            var next = this.selectedIndex() + 1;
            var hasNext = this.items()[next] !== undefined;
            hasNext && this.selectedIndex(next);
            return hasNext;
        };
        list.prototype.selectPrev = function () {
            var prev = this.selectedIndex() - 1;
            var hasPrev = this.items()[prev] !== undefined;
            hasPrev && this.selectedIndex(prev);
            return hasPrev;
        };
        Object.defineProperty(list.prototype, "checkedItems", {
            get: function () { return this._checkedItems; },
            enumerable: true,
            configurable: true
        });
        list.prototype.add = function (data, isSelected, isDefault, isHidden, isChecked) {
            if (isSelected === void 0) { isSelected = undefined; }
            if (isDefault === void 0) { isDefault = undefined; }
            if (isHidden === void 0) { isHidden = undefined; }
            if (isChecked === void 0) { isChecked = undefined; }
            var item = this.processDataToItem(data, isSelected, isDefault, isHidden, isChecked);
            this.items.push(item);
            if (isSelected)
                item.isSelected(true);
            return this;
        };
        list.prototype.addToIndex = function (data, index, isSelected, isDefault, isHidden, isChecked) {
            if (isSelected === void 0) { isSelected = undefined; }
            if (isDefault === void 0) { isDefault = undefined; }
            if (isHidden === void 0) { isHidden = undefined; }
            if (isChecked === void 0) { isChecked = undefined; }
            var item = this.processDataToItem(data, isSelected, isDefault, isHidden, isChecked);
            this.items().add(item, index);
            item.isSelected(!!isSelected);
            return this;
        };
        list.prototype.insert = function (data, index, isSelected, isDefault, isHidden, isChecked) {
            if (isSelected === void 0) { isSelected = undefined; }
            if (isDefault === void 0) { isDefault = undefined; }
            if (isHidden === void 0) { isHidden = undefined; }
            if (isChecked === void 0) { isChecked = undefined; }
            return this.addToIndex.apply(this, arguments);
        };
        list.prototype.processDataToItem = function (data, isSelected, isDefault, isHidden, isChecked) {
            var _this = this;
            if (isSelected === void 0) { isSelected = undefined; }
            if (isDefault === void 0) { isDefault = undefined; }
            if (isHidden === void 0) { isHidden = undefined; }
            if (isChecked === void 0) { isChecked = undefined; }
            if (data === undefined || data === null || data === NaN)
                throw new Error("value to be added is faulty. Value is '" + data + "'");
            if (typeof this.validateDataFn === "function" && !this.validateDataFn(data))
                throw new Error("value to be added did not pass data validation");
            isSelected = (isSelected !== undefined && !!isSelected) || (isSelected !== false && data["isSelected"] === true);
            isDefault = (isDefault !== undefined && !!isDefault) || (isDefault !== false && data["isDefault"] === true);
            isHidden = (isHidden !== undefined && !!isHidden) || (isHidden !== false && data["isHidden"] === true);
            isChecked = (isChecked !== undefined && !!isChecked) || (isChecked !== false && data["isChecked"] === true);
            var item = {
                data: ko.observable(data),
                isDefault: isDefault,
                _isHidden: ko.observable(isHidden),
                isHidden: ko.pureComputed({
                    read: function () { return item._isHidden(); },
                    write: function (v) {
                        v = (typeof v === 'function' && v() || (ko.unwrap(v)));
                        item._isHidden(v);
                        v && item.isSelected() && item.isSelected(false);
                    }
                }),
                isSelected: ko.pureComputed({
                    read: function () { return _this._selectedItem() == item; },
                    write: function (v) {
                        if (v && _this._selectedItem() != item) {
                            _this._selectedItem(item);
                        }
                        else if (!v && _this._selectedItem() == item)
                            _this._selectedItem(null);
                    }
                }),
                isChecked: ko.observable(isChecked),
                getIdentifier: function () {
                    var d = item.data();
                    return d && (d.ID || d.IDCode || d.Guid || d.key);
                }
            };
            if (typeof this.validateItemFn === "function" && !this.validateItemFn(item))
                throw new Error("value to be added did not pass item validation");
            return item;
        };
        list.prototype.addRange = function (list) {
            var _this = this;
            list.each(function (data) { return _this.add(data); });
            return this;
        };
        list.prototype.empty = function () {
            this.items.removeAll();
            this.selectedItem(null);
            return this;
        };
        list.prototype.getByIdentifier = function (idOrIdCodeOrGuidOrKey) {
            var item = this.items().find(function (item) {
                return item.getIdentifier() === idOrIdCodeOrGuidOrKey;
            });
            return item;
        };
        list.prototype.find = function (f, index, loop) {
            return this.items().find(f, index, loop);
        };
        list.prototype.forEach = function (callback, thisArg) {
            return this.items().forEach(callback, thisArg);
        };
        list.prototype.applyEach = function (action) {
            this.forEach(function (item, index) {
                var data = item.data();
                action(data, index);
                item.data(data);
            });
        };
        list.prototype.applyEachListItem = function (action) {
            this.forEach(function (item, index) {
                action(item, index);
            });
        };
        list.prototype.checkAll = function () {
            this.applyEachListItem(function (item) { return item.isChecked(true); });
        };
        list.prototype.uncheckAll = function () {
            this.applyEachListItem(function (item) { return item.isChecked(false); });
        };
        list.prototype.selectByIdentifier = function (identifier) {
            this.selectBy(function (x) { return x.getIdentifier() === identifier; });
        };
        list.prototype.selectBy = function (fn) {
            var item = this.find(fn);
            item && item.isSelected(true);
        };
        list.prototype.removeByIdentifier = function (identifier) {
            this.removeBy(function (item) { return item.getIdentifier() === identifier; });
        };
        list.prototype.removeBy = function (fn) {
            this.items().remove(fn);
            this.items.notifySubscribers();
        };
        list.prototype.checkByIdentifier = function (arrayOfIdentifiers) {
            this.checkBy(function (item) { return !!~arrayOfIdentifiers.indexOf(item.getIdentifier()); });
        };
        list.prototype.checkBy = function (fn, keep) {
            if (keep === void 0) { keep = false; }
            this.applyEachListItem(function (item) { return item.isChecked((keep && item.isChecked()) || fn(item)); });
        };
        Object.defineProperty(list.prototype, Symbol.iterator, {
            get: function () {
                return this.items()[Symbol.iterator];
            },
            enumerable: true,
            configurable: true
        });
        return list;
    }());
    return list;
});
//# sourceMappingURL=list.js.map