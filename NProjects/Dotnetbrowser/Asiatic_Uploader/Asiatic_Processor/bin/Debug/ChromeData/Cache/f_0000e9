var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define(["require", "exports", "core/components/layerAware", "core/components/base", "core/packages/logger"], function (require, exports, layerAware, component, Logger) {
    var logger = new Logger(this);
    var flyoutElementDistance = 0;
    var flyoutHorizontalOffsetDefault = 15;
    TooltipType = {
        DEFAULT: 0,
        INFO: 1,
        SUCCESS: 2,
        WARNING: 3,
        ERROR: 4,
    };
    var deviceCanHover = typeof (matchMedia) != 'function' || !matchMedia('(hover: none)').matches;
    var flyoutBase = (function (_super) {
        __extends(flyoutBase, _super);
        function flyoutBase(_element, params) {
            var _this = _super.call(this) || this;
            _this._element = _element;
            _this._creationTime = (new Date()).valueOf();
            _this.params = _this.getBaseParams();
            _this.isOpen = ko.observable(false);
            _this.positionAndSize = ko.observable({});
            _this.positionClass = ko.observable('');
            _this.styles = ko.pureComputed(function () {
                return $.extend({}, { "zIndex": _this.zIndex }, _this.positionAndSize());
            });
            _this.cssClasses = ko.pureComputed(function () {
                return "flyout-" + _this.getFlyoutType().dasherize() + " " + ko.utils.unwrapObservable(_this.params.cssClasses);
            });
            _this.container = ko.observable(null);
            _this.containerCssClasses = ko.pureComputed(function () {
                return "flyout-" + _this.getFlyoutType().dasherize() + "-container " + _this.positionClass() + " " + _this.getAdditionalContainerCssClasses() + " " + (_this.isOpen() ? 'visible' : '');
            });
            _this.params = $.extend({}, _this.getBaseParams(), params);
            return _this;
        }
        Object.defineProperty(flyoutBase.prototype, "creationTime", {
            get: function () {
                return this._creationTime;
            },
            enumerable: true,
            configurable: true
        });
        flyoutBase.prototype.getBaseParams = function () {
            return {
                onOpen: function () { },
                onClose: function () { },
                cssClasses: '',
                containerCssClasses: '',
                closeOnScroll: true,
                closeOnOutsideClick: true,
                useMouseForAlignment: true,
            };
        };
        Object.defineProperty(flyoutBase.prototype, "element", {
            get: function () {
                return this._element;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(flyoutBase.prototype, "$element", {
            get: function () {
                return $(this._element);
            },
            enumerable: true,
            configurable: true
        });
        flyoutBase.prototype.getAdditionalContainerCssClasses = function () {
            return ko.utils.unwrapObservable(this.params.containerCssClasses);
        };
        flyoutBase.prototype.getHorizontalOffset = function () {
            return flyoutHorizontalOffsetDefault;
        };
        flyoutBase.prototype.calculatePosition = function (evt) {
            var _a = this.element.getBoundingClientRect(), left = _a.left, right = _a.right, top = _a.top, bottom = _a.bottom;
            if (this.params.useMouseForAlignment) {
                if (evt != null && evt.offsetX) {
                    left += evt.offsetX;
                    right = left;
                }
            }
            var topHalf = top < (window.innerHeight / 2);
            var leftHalf = left < (window.innerWidth / 2);
            this.positionClass("flyout-" + (topHalf ? 'top' : 'bottom') + "-" + (leftHalf ? 'left' : 'right'));
            var positionAndSize = {};
            var horizontalOffset = this.getHorizontalOffset();
            if (leftHalf) {
                positionAndSize['left'] = (left - horizontalOffset) + 'px';
                positionAndSize['maxWidth'] = (window.innerWidth - left + horizontalOffset) + 'px';
            }
            else {
                positionAndSize['right'] = (window.innerWidth - right - horizontalOffset) + 'px';
                positionAndSize['maxWidth'] = (right + horizontalOffset) + 'px';
            }
            if (topHalf) {
                positionAndSize['top'] = bottom + flyoutElementDistance + 'px';
                positionAndSize['maxHeight'] = (window.innerHeight - bottom - flyoutElementDistance) + 'px';
            }
            else {
                positionAndSize['bottom'] = (window.innerHeight - top) + flyoutElementDistance + 'px';
                positionAndSize['maxHeight'] = (top - flyoutElementDistance) + 'px';
            }
            this.positionAndSize(positionAndSize);
        };
        flyoutBase.prototype.open = function (evt) {
            var _this = this;
            this.calculatePosition(evt);
            window.requestAnimationFrame(function () {
                _this.isOpen(true);
                _this.addRemoveAnchorClass('flyout-open');
                if (_this.params.closeOnScroll) {
                    flyouts.instance.createInstanceScrollCloseHandler(_this);
                }
            });
        };
        flyoutBase.prototype.close = function () {
            this.isOpen(false);
            this.addRemoveAnchorClass('flyout-open');
            this.params.onClose();
            this.dispose();
        };
        flyoutBase.prototype.addRemoveAnchorClass = function (cls) {
            var _this = this;
            window.requestAnimationFrame(function () {
                if (_this.isOpen()) {
                    _this.$element.addClass(cls);
                }
                else {
                    _this.$element.removeClass(cls);
                }
            });
        };
        flyoutBase.prototype.closeAndDispose = function () {
            logger.warn('.closeAndDispose() is deprecated, please just use .close() instead!');
            this.close();
        };
        flyoutBase.prototype.calculateZIndex = function () {
            return this.calculateZIndexForContext(ko.contextFor(this.element)) + (layerAware.zIndexStep / 2);
        };
        return flyoutBase;
    }(component));
    var customFlyout = (function (_super) {
        __extends(customFlyout, _super);
        function customFlyout(element, params) {
            return _super.call(this, element, params) || this;
        }
        customFlyout.prototype.getFlyoutType = function () {
            return 'custom';
        };
        customFlyout.prototype.createBindingFromParams = function () {
            var result = {};
            var c = this.params.component;
            var t = this.params.template;
            function isParamObject(p) {
                return typeof p !== 'string' && p.hasOwnProperty('name');
            }
            if (t) {
                var name_1;
                var data = void 0;
                if (isParamObject(t)) {
                    name_1 = t['name'];
                    data = t['data'];
                }
                else {
                    name_1 = t;
                }
                result.name = name_1;
                result.data = data || ko.contextFor(this.element).$data;
            }
            else if (c) {
                if (isParamObject(c)) {
                    result = c;
                }
                else {
                    result.name = c;
                    result.params = typeof this.params.componentParamsFn === 'function'
                        ? this.params.componentParamsFn()
                        : {};
                }
            }
            return result;
        };
        return customFlyout;
    }(flyoutBase));
    var menu = (function (_super) {
        __extends(menu, _super);
        function menu(element, params) {
            var _this = _super.call(this, element, params) || this;
            _this._menuItems = ko.observableArray();
            _this.menuItems = ko.pureComputed(function () {
                return _this._menuItems().findAll(function (x) { return !ko.utils.unwrapObservable(x.isHidden); });
            });
            _this.createItemsFromParams();
            return _this;
        }
        menu.prototype.getFlyoutType = function () {
            return 'menu';
        };
        menu.prototype.getBaseParams = function () {
            return $.extend({}, _super.prototype.getBaseParams.call(this), {
                items: [],
                closeOnItemClick: true,
                useMouseForAlignment: false
            });
        };
        menu.prototype.getItemBaseParams = function () {
            return {
                text: 'Unnamed item',
                onClick: function () { },
                isHidden: false,
                isDisabled: false,
            };
        };
        menu.prototype.getHorizontalOffset = function () {
            return 0;
        };
        menu.prototype.createItemsFromParams = function () {
            var _this = this;
            var tmp = [];
            ko.utils.unwrapObservable(this.params.items).each(function (item, i) {
                var text = item.text || item.key;
                item = $.extend({}, _this.getItemBaseParams(), item);
                tmp.push({
                    key: item.key || "menu-item-" + i,
                    text: text,
                    onClick: item.onClick,
                    isHidden: item.isHidden,
                    permissionDomain: item.permissionDomain,
                    permissions: item.permissions,
                    isDisabled: item.isDisabled,
                    html: ko.pureComputed(function () {
                        var result = 'Unnamed item';
                        if (item.html) {
                            result = ko.utils.unwrapObservable(item.html);
                        }
                        else if (text) {
                            result = "<span>" + ko.utils.unwrapObservable(text) + "</span>";
                        }
                        return result;
                    })
                });
            });
            this._menuItems(tmp);
        };
        menu.prototype.onItemClick = function (item) {
            item.onClick(item.key);
            if (this.params.closeOnItemClick) {
                this.close();
            }
        };
        return menu;
    }(flyoutBase));
    var tooltip = (function (_super) {
        __extends(tooltip, _super);
        function tooltip(element, params) {
            return _super.call(this, element, params) || this;
        }
        tooltip.prototype.getFlyoutType = function () {
            return 'tooltip';
        };
        tooltip.prototype.getBaseParams = function () {
            return $.extend({}, _super.prototype.getBaseParams.call(this), {
                title: '',
                text: 'No text given',
                type: TooltipType.DEFAULT,
            });
        };
        tooltip.prototype.getAdditionalContainerCssClasses = function () {
            var typeCssClass = '';
            switch (this.params.type) {
                case TooltipType.INFO:
                    typeCssClass = 'info';
                    break;
                case TooltipType.SUCCESS:
                    typeCssClass = 'success';
                    break;
                case TooltipType.WARNING:
                    typeCssClass = 'warning';
                    break;
                case TooltipType.ERROR:
                    typeCssClass = 'alert';
                    break;
                case TooltipType.DEFAULT:
                default:
                    typeCssClass = 'default';
                    break;
            }
            return "tooltip-type-" + typeCssClass + " " + _super.prototype.getAdditionalContainerCssClasses.call(this);
        };
        tooltip.prototype.addRemoveAnchorClass = function (cls) {
        };
        return tooltip;
    }(flyoutBase));
    var flyouts = (function () {
        function flyouts() {
            this.list = ko.observableArray([]);
            if (flyouts._instance != null)
                return;
            flyoutBindings.init();
            this.createGlobalCloseHandler(document.documentElement, 'click', 'closeOnOutsideClick');
            this.createGlobalCloseHandler(window, 'resize');
        }
        Object.defineProperty(flyouts, "instance", {
            get: function () {
                if (!flyouts._instance) {
                    flyouts._instance = new flyouts();
                }
                return flyouts._instance;
            },
            enumerable: true,
            configurable: true
        });
        flyouts.prototype.add = function (f) {
            var _this = this;
            f.disposeLater(function () {
                _this.list.remove(f);
            });
            this.list.push(f);
            return f;
        };
        flyouts.prototype.createGlobalCloseHandler = function (selector, eventType, configFlag) {
            var _this = this;
            $(selector).on(eventType + ".flyoutHandler", function (e) {
                _this.list().each(function (flyout) {
                    if (flyout.isOpen()
                        && (flyout.params.hasOwnProperty(configFlag)
                            ? flyout.params[configFlag]
                            : true)
                        && !$.contains(flyout.container(), e.target)
                        && !e.target.classList.contains('k-link')) {
                        flyout.close();
                    }
                });
                return true;
            });
        };
        flyouts.prototype.createInstanceScrollCloseHandler = function (flyout) {
            var eventIdentificator = "scroll.flyout-" + flyout.creationTime;
            $(flyout.$element.parents()).on(eventIdentificator, function () {
                if (flyout.isOpen()) {
                    flyout.close();
                }
            });
            flyout.disposeLater(function () {
                $('*').off(eventIdentificator);
            });
        };
        flyouts.prototype.createTooltipFlyout = function (element, options) {
            return this.add(new tooltip(element, options));
        };
        flyouts.prototype.createMenuFlyout = function (element, options) {
            return this.add(new menu(element, options));
        };
        flyouts.prototype.createCustomFlyout = function (element, options) {
            return this.add(new customFlyout(element, options));
        };
        flyouts._instance = null;
        return flyouts;
    }());
    var flyoutBindings = (function () {
        function flyoutBindings() {
        }
        flyoutBindings.init = function () {
            var menu = new menuBinding();
            menu['init'] = menu['init'].bind(menu);
            ko.bindingHandlers['menu'] = menu;
            var tooltip = new tooltipBinding();
            tooltip['init'] = tooltip['init'].bind(tooltip);
            ko.bindingHandlers['tooltip'] = tooltip;
            ko.punches['namespacedBinding'].enableForBinding('tooltip');
            var flyout = new flyoutBinding();
            flyout['init'] = flyout['init'].bind(flyout);
            ko.bindingHandlers['flyout'] = flyout;
        };
        return flyoutBindings;
    }());
    var flyoutBindingHandlerBase = (function () {
        function flyoutBindingHandlerBase() {
        }
        flyoutBindingHandlerBase.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
            var _this = this;
            var options = ko.utils.unwrapObservable(valueAccessor());
            var flyout = null;
            if (!options)
                return;
            var clickableClass = this.getMarkerClass() === 'has-tooltip' ? '' : 'clickable';
            $(element).addClass("has-flyout " + this.getMarkerClass() + " " + clickableClass);
            if (window.getComputedStyle(element).display === 'inline') {
                element.style.display = 'inline-block';
            }
            ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                if (flyout != null) {
                    flyout.dispose();
                }
            });
            bindingContext['$component'].disposeLater(function () {
                if (flyout != null) {
                    flyout.dispose();
                }
            });
            var createFlyoutHandler = function (ctx, evt, openWhenElementDisabled) {
                if (openWhenElementDisabled === void 0) { openWhenElementDisabled = false; }
                if (flyout != null) {
                    flyout.close();
                }
                else {
                    if (ko.isObservable(options.isActive) && !ko.utils.unwrapObservable(options.isActive))
                        return;
                    if (!openWhenElementDisabled && element.hasAttribute("disabled"))
                        return;
                    flyout = _this.createFlyoutInstance(element, options);
                    flyout.open(evt);
                    flyout.disposeLater(function () {
                        flyout = null;
                    });
                }
                return false;
            };
            var binding = {};
            if (deviceCanHover && options.openOnHover) {
                (function () {
                    var lastX, lastY;
                    binding.event = {
                        mouseover: function (ctx, e) {
                            createFlyoutHandler(ctx, e, true);
                            lastX = e.pageX, lastY = e.pageY;
                        },
                        mouseout: function () {
                            if (flyout != null) {
                                flyout.close();
                            }
                        },
                    };
                    if (options.stickToMousePosition) {
                        binding['event']['mousemove'] = function (ctx, e) {
                            if (!flyout)
                                return true;
                            var distanceX = (e.pageX - lastX), distanceY = (e.pageY - lastY), left, right, top, bottom;
                            var container = flyout.container();
                            lastX = e.pageX, lastY = e.pageY;
                            container.style.left = parseFloat(container.style.left) + distanceX + 'px';
                            container.style.right = parseFloat(container.style.right) - distanceX + 'px';
                            container.style.top = parseFloat(container.style.top) + distanceY + 'px';
                            container.style.bottom = parseFloat(container.style.bottom) - distanceY + 'px';
                        };
                    }
                }());
            }
            var eventHandlerName = 'click.flyout-' + H.randomGuid();
            $(element).on(eventHandlerName, function (evt) {
                createFlyoutHandler(undefined, evt);
            });
            ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                $(element).off(eventHandlerName);
            });
            ko.applyBindingsToNode(element, binding);
        };
        return flyoutBindingHandlerBase;
    }());
    var tooltipBinding = (function (_super) {
        __extends(tooltipBinding, _super);
        function tooltipBinding() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        tooltipBinding.prototype.createFlyoutInstance = function (element, options) {
            return flyouts.instance.createTooltipFlyout(element, options);
        };
        tooltipBinding.prototype.getMarkerClass = function () {
            return 'has-tooltip';
        };
        tooltipBinding.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
            var options = ko.utils.unwrapObservable(valueAccessor());
            if (!options)
                return;
            if (H.isString(options)) {
                options = {
                    text: options,
                };
            }
            options.openOnHover = typeof options.openOnHover === 'undefined' ? true : options.openOnHover;
            options.stickToMousePosition = typeof options.stickToMousePosition === 'undefined' ? false : options.stickToMousePosition;
            options.stickToMousePosition = options.stickToMousePosition && options.openOnHover;
            _super.prototype.init.call(this, element, function () { return options; }, allBindingsAccessor, viewModel, bindingContext);
        };
        tooltipBinding.prototype.getNamespacedHandler = function (binding) {
            return binding === "text" ? H.utils.createNamespaceBindingHandler("tooltip", this.init.bind(this)) : null;
        };
        return tooltipBinding;
    }(flyoutBindingHandlerBase));
    var menuBinding = (function (_super) {
        __extends(menuBinding, _super);
        function menuBinding() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        menuBinding.prototype.createFlyoutInstance = function (element, options) {
            var params;
            function isMenuOptions(p) {
                return !$.isArray(p) && p.hasOwnProperty('items');
            }
            if (isMenuOptions(options)) {
                params = options;
            }
            else if ($.isArray(options)) {
                params = {
                    items: options,
                };
            }
            return flyouts.instance.createMenuFlyout(element, params);
        };
        menuBinding.prototype.getMarkerClass = function () {
            return 'has-menu';
        };
        return menuBinding;
    }(flyoutBindingHandlerBase));
    var flyoutBinding = (function (_super) {
        __extends(flyoutBinding, _super);
        function flyoutBinding() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        flyoutBinding.prototype.createFlyoutInstance = function (element, options) {
            return flyouts.instance.createCustomFlyout(element, options);
        };
        flyoutBinding.prototype.getMarkerClass = function () {
            return 'has-custom-flyout';
        };
        return flyoutBinding;
    }(flyoutBindingHandlerBase));
    return flyouts;
});
//# sourceMappingURL=flyouts.js.map