var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
define(["require", "exports", "core/components/layer", "core/packages/logger", "core/packages/dispose"], function (require, exports, layer, Logger, dispose) {
    var logger = new Logger(this);
    var RouterUtils = (function () {
        function RouterUtils() {
        }
        Object.defineProperty(RouterUtils, "PROPERTY_DELIMITER", {
            get: function () { return "&"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RouterUtils, "SECTION_DELIMITER", {
            get: function () { return "/"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RouterUtils, "VALUE_DELIMITER", {
            get: function () { return "="; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RouterUtils, "PREFIX", {
            get: function () { return "#!/"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RouterUtils, "ORIGIN_DELIMITER", {
            get: function () { return "!!/"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RouterUtils, "decoders", {
            get: function () {
                return this._decoders.slice(0);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RouterUtils, "encoders", {
            get: function () {
                return this._encoders.slice(0);
            },
            enumerable: true,
            configurable: true
        });
        RouterUtils.decodeObject = function (obj) {
            var _this = this;
            Object.keys(obj).each(function (key) {
                var value = obj[key];
                if (Object.isObject(value)) {
                    _this.decodeObject(value);
                }
                else if (Object.isArray(value)) {
                    _this.decodeArray(value);
                }
                else {
                    var result = _this.decodeValue(value);
                    if (result !== undefined) {
                        obj[key] = result;
                    }
                }
            });
        };
        RouterUtils.decodeArray = function (arr) {
            var _this = this;
            arr.each(function (value, index) {
                if (Object.isObject(value)) {
                    _this.decodeObject(value);
                }
                else if (Object.isArray(value)) {
                    _this.decodeArray(value);
                }
                else {
                    var result = _this.decodeValue(value);
                    if (result !== undefined) {
                        arr[index] = result;
                    }
                }
            });
        };
        RouterUtils.decodeValue = function (value) {
            var result = undefined;
            this._decoders.each(function (decoderFn) {
                result = decoderFn(value);
                return result === undefined;
            });
            return result !== undefined
                ? result
                : value;
        };
        RouterUtils.decode = function (hashSection) {
            var _this = this;
            if (hashSection == "")
                return {};
            var obj = {};
            var propertyStrings = hashSection ? hashSection.split(this.PROPERTY_DELIMITER) : [""];
            propertyStrings.each(function (ps, index) {
                ps = (ps || "").trim();
                if (ps == "")
                    return;
                var delimiterIndex = ps.indexOf(_this.VALUE_DELIMITER);
                if (delimiterIndex === -1) {
                    obj[ps] = true;
                }
                else {
                    var key = ps.substr(0, delimiterIndex);
                    var value = ps.substr(delimiterIndex + 1);
                    obj[key] = _this.decodeValue(value);
                }
            });
            return obj;
        };
        RouterUtils.encodeValue = function (value) {
            var result = undefined;
            this._encoders.each(function (encoderFn) {
                result = encoderFn(value);
                return result === undefined;
            });
            return result;
        };
        RouterUtils.encodeObject = function (obj) {
            var propertyStringList = [];
            Object.keys(obj).each(function (key) {
                var value = obj[key];
                if (value === true) {
                    propertyStringList.push(key);
                }
                else {
                    var encodedValue = RouterUtils.encodeValue(obj[key]);
                    if (encodedValue !== undefined) {
                        propertyStringList.push(key + RouterUtils.VALUE_DELIMITER + encodedValue);
                    }
                }
            });
            return propertyStringList.join(RouterUtils.PROPERTY_DELIMITER);
        };
        RouterUtils.encode = function (value) {
            if (value === null) {
                return "";
            }
            if (ko.isObservable(value)) {
                return RouterUtils.encode(value());
            }
            else if (Object.isObject(value)) {
                return RouterUtils.encodeObject(value);
            }
            throw new Error("Cant encode non-object value");
        };
        RouterUtils.synchronize = function (source, target, depth, maxDepth) {
            var _this = this;
            if (depth === void 0) { depth = 0; }
            if (maxDepth === void 0) { maxDepth = 5; }
            var sKeys = Object.keys(source);
            var tKeys = Object.keys(target);
            var update = sKeys.intersect(tKeys);
            var remove = tKeys.subtract(sKeys);
            var add = sKeys.subtract(tKeys);
            remove.each(function (key) {
                delete target[key];
            });
            add.each(function (key) {
                target[key] = source[key];
            });
            var updateHappened = false;
            update.each(function (key) {
                if (_this.synchronizeProperty(source, target, key, depth, maxDepth))
                    updateHappened = true;
            });
            return !!add.length || !!remove.length || updateHappened;
        };
        RouterUtils.synchronizeArray = function (source, target, depth, maxDepth) {
            var _this = this;
            if (source.length == 0) {
                if (target.length > 0) {
                    target.splice(0);
                    return true;
                }
                else
                    return false;
            }
            else if (target.length == 0) {
                if (source.length > 0) {
                    target.insert(source);
                    return true;
                }
                else
                    return false;
            }
            var wasUnsync = false;
            source.each(function (sValue, index) {
                var tValue = target[index];
                if (_this.synchronizeProperty(source, target, index, depth + 1, maxDepth)) {
                    wasUnsync = true;
                }
            });
            if (source.length < target.length) {
                wasUnsync = true;
                target.splice(source.length);
            }
            return wasUnsync;
        };
        RouterUtils.synchronizeProperty = function (source, target, key, depth, maxDepth) {
            var isObj = Object.isObject;
            var isArr = Object.isArray;
            var sValue = source[key];
            var tValue = target[key];
            var wrapped = ko.isObservable(tValue);
            if (wrapped) {
                tValue = tValue();
            }
            if (isObj(tValue) && isObj(sValue)) {
                var wasUnsync = this.synchronize(sValue, tValue, depth + 1, maxDepth);
                if (wasUnsync && wrapped) {
                    target[key].valueHasMutated();
                }
                return wasUnsync;
            }
            else if (isArr(tValue) && isArr(sValue)) {
                var wasUnsync = this.synchronizeArray(tValue, sValue, depth + 1, maxDepth);
                if (wasUnsync && wrapped) {
                    target[key].valueHasMutated();
                }
                return wasUnsync;
            }
            else if (tValue !== sValue) {
                if (wrapped) {
                    target[key](sValue);
                }
                else {
                    target[key] = sValue;
                }
                return true;
            }
            return false;
        };
        RouterUtils.generateHash = function (route, maxDepth, trimTrailingDelimiters, includePrefix) {
            if (maxDepth === void 0) { maxDepth = null; }
            if (trimTrailingDelimiters === void 0) { trimTrailingDelimiters = true; }
            if (includePrefix === void 0) { includePrefix = true; }
            if (!route) {
                throw new Error("No Route supplied!");
            }
            var hashParts = [];
            var fillRecursiveFn = function (route, depth) {
                if (depth === void 0) { depth = 0; }
                if (maxDepth && depth > maxDepth)
                    return;
                var hashPart = route.hashPart;
                hashParts.push(hashPart || "");
                if (route.hasChild) {
                    fillRecursiveFn(route.getOrCreateChild(), depth + 1);
                }
            };
            fillRecursiveFn(route);
            var hash = hashParts.join(RouterUtils.SECTION_DELIMITER);
            while (trimTrailingDelimiters && hash.last() === RouterUtils.SECTION_DELIMITER) {
                hash = hash.substr(0, hash.length - 1);
            }
            return (includePrefix ? RouterUtils.PREFIX : "") + hash;
        };
        RouterUtils.parseHash = function (hash) {
            hash = hash || location.hash;
            if (hash.startsWith(this.PREFIX)) {
                hash = hash.substr(this.PREFIX.length);
            }
            var parts = hash.split(this.ORIGIN_DELIMITER);
            var origin = parts.length > 1
                ? parts.pop()
                : null;
            var data = {
                origin: origin,
                hash: parts.join(this.ORIGIN_DELIMITER)
            };
            return data;
        };
        RouterUtils.updateFromHash = function (route, locHash) {
            if (!route) {
                throw new Error("No Route supplied!");
            }
            if (!locHash && locHash !== "") {
                throw new Error("No Hash supplied!");
            }
            var hash = RouterUtils.parseHash(locHash).hash;
            var hashParts = hash.split(RouterUtils.SECTION_DELIMITER);
            var curRoute;
            var hashPartRouteTuples = hashParts.map(function (hs, index) {
                curRoute = (curRoute && curRoute.getOrCreateChild()) || route;
                var tuple = {
                    raw: hs,
                    route: curRoute
                };
                return tuple;
            });
            while (curRoute.hasChild) {
                curRoute = curRoute.child;
                hashPartRouteTuples.push({
                    raw: "",
                    route: curRoute
                });
            }
            hashPartRouteTuples.each(function (t) {
                if (t.raw != t.route.hashPart) {
                    t.route.hashPart = t.raw;
                }
            });
        };
        RouterUtils._decoders = [
            function (v) {
                var match = v.match(/\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z)/);
                return match
                    ? Date.create(v)
                    : undefined;
            },
            function (v) {
                var dateParts = v.match(/(\d{4})-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])$/);
                return dateParts
                    ? new Date(parseInt(dateParts[1]), parseInt(dateParts[2]) - 1, parseInt(dateParts[3]))
                    : undefined;
            },
            function (v) {
                if (v === "true")
                    return true;
                if (v === "false")
                    return false;
            },
            function (v) {
                if (parseFloat(v) + "" === v)
                    return parseFloat(v);
            },
            function (v) {
                try {
                    var newValue = JSON.parse(v);
                    if (newValue !== v && newValue !== undefined)
                        return newValue;
                }
                catch (e) {
                    return undefined;
                }
            }
        ];
        RouterUtils._encoders = [
            function (o) {
                if (ko.isObservable(o)) {
                    return RouterUtils.encodeValue(o());
                }
            },
            function (d) {
                if (d instanceof Date) {
                    if (d.getHours() || d.getMinutes() || d.getSeconds()) {
                        return d.toISOString();
                    }
                    return d.getFullYear() + "-" + (d.getMonth() + 1).pad(2) + "-" + d.getDate().pad(2);
                }
            },
            function (b) {
                if (b === true || b === false || b === null) {
                    return b + "";
                }
            },
            function (n) {
                if (Object.isNumber(n)) {
                    return n + "";
                }
            },
            function (s) {
                if (Object.isString(s)) {
                    return s;
                }
            },
            function (v) {
                return JSON.stringify(v);
            }
        ];
        return RouterUtils;
    }());
    var Route = (function () {
        function Route() {
            this._child = ko.observable(null);
            this._data = ko.observable({}).extend({
                rateLimit: 0,
                method: "notifyWhenChangesStop"
            });
            this._raw = ko.observable(null);
            this._subscriptions = [];
            this.reset();
        }
        Object.defineProperty(Route.prototype, "data", {
            get: function () {
                return this._data();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Route.prototype, "raw", {
            get: function () {
                return this._raw();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Route.prototype, "child", {
            get: function () {
                return this._child();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Route.prototype, "hasChild", {
            get: function () {
                return !!this._child();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Route.prototype, "hashPart", {
            get: function () {
                return RouterUtils.encode(this._data());
            },
            set: function (s) {
                this._raw(s);
                var decoded = RouterUtils.decode(s);
                if (!this._data()) {
                    this._data(decoded);
                }
                else {
                    if (RouterUtils.synchronize(decoded, this._data())) {
                        this._data.valueHasMutated();
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Route.prototype, "observableData", {
            get: function () {
                return this._data;
            },
            enumerable: true,
            configurable: true
        });
        Route.prototype.set = function (key, value) {
            if (typeof value === "function") {
                throw new Error("Cant store functions in Route. Did your forget to unwrap your observable?");
            }
            if (this._data()[key] != value) {
                this._data()[key] = value;
                this._data.valueHasMutated();
            }
            return this;
        };
        Route.prototype.get = function (key) {
            return this._data()[key];
        };
        Route.prototype.getOrCreateChild = function () {
            var child = this._child();
            if (!child) {
                this._child(child = new Route());
            }
            return child;
        };
        Route.prototype.purgeChild = function () {
            if (this.hasChild)
                this._child(null);
            return this;
        };
        Route.prototype.reset = function (recursive) {
            if (recursive === void 0) { recursive = false; }
            this._data({});
            if (recursive && this.hasChild) {
                this.child.reset(recursive);
            }
            return this;
        };
        Route.prototype.subscribe = function (fn) {
            var _this = this;
            var s = this._data.subscribe(function (data) {
                fn(data, _this.hashPart);
            });
            this._subscriptions.push(s);
            return {
                dispose: function () {
                    s.dispose();
                    _this._subscriptions.remove(s);
                }
            };
        };
        Route.prototype.disposeSubscriptions = function (recursive) {
            if (recursive === void 0) { recursive = true; }
            this._subscriptions.each(function (s) {
                s.dispose();
            });
            this._subscriptions = [];
            if (recursive && this.hasChild) {
                this.child.disposeSubscriptions(recursive);
            }
            return this;
        };
        Route.prototype.valueHasMutated = function () {
            this._data.valueHasMutated();
        };
        Route.prototype.synchronizeHashWithObservable = function (observable) {
            var _this = this;
            observable(this.hashPart);
            return dispose.combineDisposables(this.subscribe(function (_, hash) { return observable(hash); }), observable.subscribe(function (value) {
                if (_this.hashPart != value) {
                    _this.hashPart = value;
                    routerInstance.update();
                }
            }));
        };
        return Route;
    }());
    var Router = (function () {
        function Router() {
            this.appName = app.name;
            this._isCascading = ko.observable(false);
        }
        Object.defineProperty(Router.prototype, "isCascading", {
            get: function () {
                return this._isCascading;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Router.prototype, "originHash", {
            get: function () {
                return RouterUtils.parseHash(location.hash).origin;
            },
            set: function (value) {
                value = value || "";
                if (value.startsWith(RouterUtils.PREFIX))
                    value = value.substr(RouterUtils.PREFIX.length);
                if (this.originHash != value) {
                    var strippedLocation = RouterUtils.parseHash(location.hash).hash;
                    var hash = value
                        ? RouterUtils.PREFIX + strippedLocation + RouterUtils.ORIGIN_DELIMITER + value
                        : RouterUtils.PREFIX + strippedLocation;
                    location.hash = hash;
                }
            },
            enumerable: true,
            configurable: true
        });
        Router.prototype.storeAsOrigin = function (originHash) {
            var hash = originHash || RouterUtils.generateHash(this.root, undefined, undefined, false);
            this.originHash = hash;
            return hash;
        };
        Router.prototype.resetOrigin = function () {
            this.originHash = null;
        };
        Router.prototype.returnToOrigin = function (originHash) {
            var hash = this.originHash || originHash || undefined;
            if (hash === this.hash.replace(RouterUtils.PREFIX, '')) {
                hash = null;
            }
            if (hash) {
                this.follow(hash, "");
            }
            else {
                var defaultComponent = app.instance.rootComponentInstance()
                    .childrenFlat()
                    .find(function (x) { return x.isDefault; });
                this.follow(defaultComponent.route);
            }
        };
        Object.defineProperty(Router.prototype, "root", {
            get: function () {
                return this._root();
            },
            set: function (route) {
                this._root(route);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Router.prototype, "hash", {
            get: function () {
                return RouterUtils.generateHash(this.root);
            },
            set: function (value) {
                RouterUtils.updateFromHash(this.root, value || "");
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Router.prototype, "depth", {
            get: function () {
                return this._depth();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Router.prototype, "Utils", {
            get: function () {
                return RouterUtils;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Router.prototype, "Route", {
            get: function () {
                return Route;
            },
            enumerable: true,
            configurable: true
        });
        Router.prototype.init = function (hash) {
            var _this = this;
            if (hash === void 0) { hash = undefined; }
            if (this._root) {
                throw new Error("Router already initialised!");
            }
            this._locHash = hash || location.hash;
            var route = new Route();
            try {
                RouterUtils.updateFromHash(route, this._locHash);
            }
            catch (e) {
                logger.error('', e);
            }
            this._root = ko.observable(route);
            this._depth = ko.pureComputed(function () {
                var count = 0;
                var curRoute = _this._root();
                while (curRoute.hasChild) {
                    curRoute = curRoute.child;
                    count++;
                }
                return count;
            });
            var func = function (e) {
                _this.onHashChangeHandler(e);
            };
            window.onhashchange = func;
        };
        Router.prototype.replace = function (hash, origin) {
            var newHash = this.createHash(hash, origin);
            this._locHash = newHash;
            if (location.hash != newHash) {
                logger.log(".replace() => %s", newHash);
                location.replace(newHash);
                return true;
            }
            else {
                return false;
            }
        };
        Router.prototype.update = function (hash, origin) {
            var newHash = this.createHash(hash, origin);
            this._locHash = newHash;
            if (location.hash != newHash) {
                return this.follow(newHash, origin);
            }
            else {
                return false;
            }
        };
        Router.prototype._handleRedirect = function (hash, follow) {
            if (follow === void 0) { follow = false; }
            var _a = __read(hash.split(RouterUtils.ORIGIN_DELIMITER)[0].split(RouterUtils.PREFIX), 2), appName = _a[0], routeWithoutPrefix = _a[1];
            var possibleRootComponents = app.instance.rootComponentInstance().childrenFlat();
            if (!routeWithoutPrefix) {
                routeWithoutPrefix = appName;
            }
            var followRootComponentRoute = routeWithoutPrefix.split(RouterUtils.SECTION_DELIMITER)[0];
            var followRootComponent = possibleRootComponents.find(function (x) { return x.route === followRootComponentRoute; });
            var cleanAppName;
            if (appName === '') {
                cleanAppName = this.appName;
            }
            else if (appName === routeWithoutPrefix && !!followRootComponent) {
                cleanAppName = this.appName;
            }
            else {
                cleanAppName = appName.replace(/[^a-zA-Z0-9]/ig, '');
            }
            if (follow) {
                if (cleanAppName === this.appName) {
                    this._followWithinApp(routeWithoutPrefix, followRootComponent && followRootComponent.isCascade);
                }
                else {
                    if (!hash.startsWith('apps')) {
                        var tmp = hash.split('/');
                        tmp.add('apps', 0);
                        hash = tmp.join('/');
                    }
                    this._followToOtherApp(hash);
                }
            }
            if (!hash.startsWith(cleanAppName)) {
                hash = cleanAppName + "#!/" + hash;
            }
            return hash;
        };
        Router.prototype.follow = function (hash, originOrStoreCurrent) {
            this._handleRedirect(hash, true);
            return true;
        };
        Router.prototype.getUri = function (hash) {
            hash = this._handleRedirect(hash);
            var a = document.createElement('a');
            a.href = hash;
            return a.href;
        };
        Router.prototype._followWithinApp = function (hash, storeOrigin) {
            var isCascading = this._isCascading();
            var originHash = null;
            if (!isCascading && storeOrigin) {
                this._isCascading(true);
                originHash = location.hash;
            }
            else if (isCascading && storeOrigin) {
                if (this.originHash != null) {
                    originHash = this.originHash;
                }
                else {
                    originHash = location.hash;
                }
            }
            else if (isCascading && !storeOrigin) {
                this._isCascading(false);
                originHash = null;
            }
            var newHash = this.createHash(hash, originHash);
            if (hash !== location.hash) {
                location.hash = newHash;
                return true;
            }
            else {
                logger.warn(".follow() IGNORED, same hash => %s", hash);
                return false;
            }
        };
        Router.prototype._followToOtherApp = function (hash) {
            location.replace("" + location.instance + hash);
            return true;
        };
        Router.prototype.onHashChangeHandler = function (ev) {
            var _this = this;
            var _a = RouterUtils.parseHash(location.hash), hash = _a.hash, origin = _a.origin;
            if (!hash.startsWith(RouterUtils.PREFIX)) {
                hash = RouterUtils.PREFIX + hash;
            }
            if (hash == this._locHash) {
                if (ev) {
                    ev.preventDefault();
                }
                return;
            }
            if (layer.hasActiveLayers()) {
                if (ev) {
                    ev.preventDefault();
                }
                this.update(this.hash, this.originHash);
                layer.tryCloseAll()
                    .then(function () {
                    _this.follow(hash, origin);
                })
                    .catch(function () {
                });
            }
            else {
                this._locHash = hash;
                this.hash = this._locHash;
            }
        };
        Router.prototype.createHash = function (hash, origin) {
            var result = "";
            var resultHash = hash !== undefined ? hash : this.hash;
            var resultOrigin = origin !== undefined ? origin : this.originHash;
            if (resultOrigin && resultOrigin.startsWith(RouterUtils.PREFIX)) {
                resultOrigin = resultOrigin.substr(RouterUtils.PREFIX.length);
            }
            result = resultHash + (resultOrigin ? RouterUtils.ORIGIN_DELIMITER + resultOrigin : "");
            if (result && !result.startsWith(RouterUtils.PREFIX)) {
                result = RouterUtils.PREFIX + result;
            }
            return result;
        };
        return Router;
    }());
    var routerInstance = new Router();
    return routerInstance;
});
//# sourceMappingURL=router.js.map